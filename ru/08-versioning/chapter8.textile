h1. 8 Версионирование

h2. 8.1 Обзор

Контроль версий является неотъемлемой частью архитектуры openEHR. Хранилище openEHR для ЭМК или демографической информации управляется как набор "контейнеров версий" (моделируется с помощью класса @VERSIONED_OBJECT<T>@ из пакета @common.change_control@) с контролем изменений, каждый из которых содержит версии высокоуровневых структур хранения контента(таких как Composition или Party), отражающие все изменения во времени. Высокоуровневая структура хранения контента с контролем версий изображена на рисунке 23.

p=. !../../en/08-versioning/fig23.png!

p=. *FIGURE 23* Структуры контроля версий

Версионирование высокоуровневых структур - одно из необходимых, но не достаточных условий для хранилища, которое должно обеспечить согласованность, прослеживаемость, нестираемость, возможность отката и поддержки судебной экспертизы прошлых состояний данных. Так же необходимы функции, поддерживающие "контроль изменений". В соответствии со строгой схемой управления изменениями, изменения применяются произвольным образом не толко лишь к высокоуровневым струткурам, а к самому хранилищу в целом. Изменения принимают форму "набора изменений", называемых «Contributions», которые состоят из новых или измененных версий контролируемых элементов в хранилище. Ключевая особенность "набора изменений" - это то, что он действует как транзакция, и переводит репозиторий из одного согласованного состояния в другое, в то время как произвольные комбинации изменений отдельных контролируемых элементов вполне могут быть противоречивы, и даже ошибочно опасны, когда дело касается клинических данных. Эти концепции хорошо известны в парадигме управления конфигурацией (CM), и используются в качестве основы для большинства программного обеспечения и других систем управления изменениями, в том числе многочисленных бесплатных и коммерческих продуктов, доступных сегодня. Они являются центральным элементом дизайна архитектуры openEHR. В следующих разделах приведена более подробная информация.

h2. 8.2 Парадигма управления конфигурацией

Парадигма "управления конфигурацией" (CM) хорошо известна в разработке программного обеспечения, и имеет свой собственный стандарт IEEE [1]. СМ описывает управление контролем изменений в хранилище элементов (формально называемых "конфигурационные элементы" или CI), и имеет отношение к любому логическому хранилищу различных информационных элементов, которое меняется во времени. В медицинских информационных системах, существует по крайней мере два типа информации требующей такого управления: электронные медицинские карты и демографическая информация. В большинстве ретроспективных анализов было выявлено, что необходимость управления изменениями была выражена в терминах конкретных требований к аудиту предыдущих изменений, наличию предыдущих состояний хранилища и так далее. В openEHR целью является создание формальных моделей общего назначения для управления изменениями и примеров их применения к медицинской информации.

fn1. IEEE 828-2005 - standard for Software Configuration Management Plans.

h3. 8.2.1 Организация хранилища

Общая организация хранилища сложных элементов информации, например хранилища программного обеспечения или ЭМК, состоит из следующих частей:
* множество различных элементов информации или __конфигурационных элементов__, каждый из которых однозначно идентифицирован, и может иметь любую степень сложности внутренней структуры;
* опционально, некоторая разновидность системы каталогов, в которой упорядочиваются конфигурационные элементы;
* прочая информация о среде, которая может иметь отношение к правильной интерпретации исходных версионированных элементов, например, версии инструментов, использованных для их создания.

В хранилище документов или программного обеспечения CI файлы расположены в каталогах файловой системы; в ЭМК, основанной на openEHR, это Compositions, опциональная структура Folder, Parties в демографической службе и т.д.. Contributions вносятся в хранилище пользователями. Эта обобщенная абстракция изображена на рисунке 24.

p=. !../../en/08-versioning/fig24.png!

p=. *FIGURE 24* Общая структура контролируемого хранилища

h3. 8.2.2 Управление изменениями

Изменения не происходят изолированно в конфигурационных элементах, но в хранилище в целом. Возможные типы изменения включают в себя:
* Оздание нового CI;
* Удаление CI;
* Модификация CI;
* Создание, изменение или удаление части структуры каталогов;
* Перемещение CI в другое место в структуре каталогов;
* Аттестация существующих CI.

Цель управления конфигурацией - удостоверение в том, что:
* Хранилище всегда находится в допустимом состоянии;
* Любое предыдущее состояние хранилища может быть восстановлено;
* Все изменения аудируемы.

h2. 8.3 Управление изменениями во времени

Правильное управление изменениями в хранилище требует наличия двух механизмов. Первое, __контроль версий__, используется для управления версиями каждого CI, и структурами каталогов, если они есть. Второе - понятие "набор изменений", известный как __contribution__ в openEHR. Это множество изменений в отдельных CI (и других высокоуровневых структурах в ЭМК), сделанных пользователем в рамках некоторого логического изменения. Например, в хранилище документов, логическим изменением может являться обновление документа, который состоит из нескольких файлов (CI). В данной ситуации в хранилище существует один Contribution, состоящий из изменений файла конфигурационных элементов (CI) документа. В EHR, Contribution может состоять из изменений в более чем одной Composition, и, вероятно, организационной структуры Folder. Любые изменения в EHR требует наличия Contribution. Видами изменений, которые могут произойти с элементами, задействованными в Contribution, являются:
* __Добавление новых элементов__: создается новый контейнер Version и первая версия Version добавляется в него;
* __Удаление элемента__: новый объект Version, атрибут __data__ которого установлен в значение Void, добавляется в существующей Version контейнер;
* __Модификация элемента__: новый объект Version, атрибут __data__ которого содержит обновленное содержимое элемента, добавляется в существующий контейнер Version (это может быть сделано для логического обновления или исправления);
* __Импорт элемента__: создается новый "импортированный" объект Version, включающий полученный Version объект;
* __Аттестации элемента__: новый объект Attestation добавляется в список __attestations__ существующих версий Version.

Типичная последовательность изменений в хранилище показана на рисунке 25.

p=. !../../en/08-versioning/fig25.png!

p=. *FIGURE 25* Набор изменений(Contributions) в хранилище (дельта форма)

Здесь показано влияние четырех Contribution (показанных в форме синих овалов с левой стороны) на хранилище, содержащее ряд CI (дерево каталогов не показано для простоты). Как только новый объект Contribution создан, хранилище изменяется неким образом. Первый Contribution формирует новый CI, и изменяет три других (изменения указаны в 'C' треугольниках). Второй Contribution приводит только к созданию нового CI. Третий вызывает создание, а также два изменения, а четвертая вызывает только изменение. (Изменения в структуре папок здесь не показаны).

Существует один нюанс, который следует отметить: на рисунке 25 показаны Contribution`ы как набора дельт, т.е. набор именно тех ​​изменений, которые происходят в карте. Таким образом, первый Contribution является множеством {CI[~w~], C[~a1~], C[~c1~], C[~d1~]} и так далее. Так ли это на самом деле, зависит от подхода к построению системы хранения. В некоторых ситуациях, некоторые CI могут быть изменены пользователем, просмотривающим текущий список и вносящим только изменения. Такая ситуация показанная на рисунке 25. В других случаях система может обеспечивать текущее состояние этих CI для редактирования пользователем, и подтверждения обновленных версий, как показано на рисунке 26. Некоторые приложения могут работать и так и так, в зависимости от того какой CI обновляется. Внутренняя реализация версионирования может как рассматривать генерацию дельты в качестве эффективного способа хранения, так и нет.

p=. !../../en/08-versioning/fig26.png!

p=. *FIGURE 26* Набор изменений(Contributions) в хранилище (не дельта форма)

Для целей openEHR, объект Contribution рассматривается как множество версий Version, созданных или заверенных за один раз, что следует из рисунка 26.

h3. 8.3.1 Обобщенная модель хранилища с контролем изменений

Рисунок 27 показывает абстрактную модель хранилища с контролем изменений, состоящую из:
* конфигурационных элементов с контролем версий - экземпляров @VERSIONED_OBJECT<T>@;
* @CONTRIBUTION@`ов;
* Опционально, системы каталогизации папок. Если папки используются, то структура папок должна версионироваться с содержимым как единое целое.

Фактический тип связей между управляемым хранилищем и другими сущностями может варьироваться - в некоторых случаях это может быть объединение, в других - агрегация; мощность связей также может варьироваться. Таким образом рисунок 27 представляет собой руководство, определеющее фактический состав контролируемых хранилищ, таких как ЭМК, а не формальную спецификацию к ним.

p=. !../../en/08-versioning/fig27.png!

p=. *FIGURE 27* Обобщенная модель хранилища с контролем изменений

h2. 8.4 “Виртуальное дерево версий”

Основная концепция дизайна модели версий, определенной в openEHR, известна как "виртуальное дерево версий". В общем идея проста. Информация фиксируется в хранилище (например, ЭМК) в виде кусков, каждый кусок - это "данные" одной из версий Version. Каждая версия Version имеет свое место в дереве версий, которое в свою очередь поддерживается внутри Versioned объекта (или "контейнера версий"). Концепция виртуального дерева версий означает, что любой Versioned объект может иметь многочисленные копии в различных системах, и что создание версий в каждой из них делается таким образом, что все созданные версии фактически совместимыми с "виртуальной" версией дерева, получаемой в результате наложения деревьев версий всех копий. Это достигается с помощью простых правил для идентификации версий и делается для облегчения обмена данными. Два очень распространенных сценариев используются в концепции виртуального дерева версий:
* Долговременные данные, выступающие в качестве прокси для объектов, описывающих состояние или ситуацию в которой находится пациент, таких как "Medications" или "Problem list" (сохраняемые Compositions в openEHR), создаются и поддерживаются в одной или нескольких организаций медицинской помощи, и используются совместно среди множества организаций;
* Некоторые медицинские карты на одном ЭМК сервере зеркалируются в один или более других серверов ЭМК (например, поставщика мед. услуг, где соответствующие пациенты также наблюдаются); процесс зеркалирования требует асинхронной синхронизации между серверами для работы совместно, независимо от местоположения, времени, или создателя любых новых данные.

Схема версионирования, используемая в openEHR гарантирует, что независимо от того, где данные создаются или куда и откуда копируются, нет никаких несоответствий, возникающих в результате обмена, и что существует явное представление логических копий данных. Поэтому она обеспечивает прямую поддержку общих данных в общем контексте медицинских услуг.
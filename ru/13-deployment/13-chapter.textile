h2. 13 Развертывание

h3. 13.1 Архитектура 5-ти звенной системы

Предыдущие секции описывали программную архитектуру спецификации openEHR. Здесь мы описываем как комплексная архитектура может быть использована для построения реальных систем. Общий архитектурный подход в любой системе openEHR может быть представлен 5ю слоями (т.е 5-ти звенная архитектура) Звенья системы:

# **хранилище**: хранение и получение данных
# **сервисы нижнего уровня**: включают в себя ЭМК, демографию, терминологию, архетипы, безопасность, положение записей и так далее. В этом слое разделение различных сервисов прозрачно, и каждый сервис имеет крупнозернистый интерфейс.
# **виртуальная ЭМК**: это слой промежуточный программный слой, и состоит из последовательного набора API к различным сервисам нижнего уровня, предоствляющим доступ к соответсвующим сервисам, тем самым давай доступ к ЭМК; включая сервисы ЭМК, демографии, безопасности, терминологии и архетипов. Он также содержит ядро с поддержкой архетипов и шаблонов, компонент ответственный за создание и обработку архетипизированных данных. В этом слое разделение сервисов нижнего уровня скрыто, предоставлена только функциональность. Возможны другие виртуальные клиенты, состоящие из API для других комбинаций сервисов нижнего уровня.
# **логика приложения**: Этот слой включает логику, специфичную для приложения, которая может быть пользовательским приложением или другим сервисом, таким как движок запросов.
# **слой представления**: этот слой состоит из графического интерфейса приложения, там где это применимо.

Такие же слои могут использованны в больших системах, как показано на рисунке 37, или в простом случае как в приложении на одной машине.

!37.png!

Рисунок 38 показыает примерное соотношение главных частей программной архитектуры openEHR к 5-ти звенной схеме. Где будут использоваться части архитектуры зависит от выбора в реализации; поэтому показанное соотношение не является жестким. Тем не менее основное использование частей архитектуры будет скорее всего одинаковым в большинстве систем таким:

* RM и AM: в основном используется для создания ядра для обработки архетипов и шаблонов;
* пакет RM @common.change_control@: предоставляет логику для версионированных сервисов, таких как ЭМК и демография
* SM: различные служебные пакеты моделей, определяющие открытые интерфейсы большинства сервисов
* пакет SM @virtual_ehr@ определяет API компонента виртуальной ЭМК 
* архетипы: архетипы могут приниматься прямо в приложениях, например перинатальный пакет может быть частично основан на группе архетипов для этой специализации.
* шаблоны: и архетипы и шаблоны будут использоваться в слое представления приложения. Некоторые будут лежать в основе графического интерфейса пользователя, другие будут иметь код, сгенерированный инструментами или динамически генерируемые формы, основанные на конкретных архетипах и шаблонах.

В будущем, абстрактный API хранилища и оптимизированная модель (трансформация существующей RM модели) скорее всего будет опубликована openEHR для помощи в реализации баз данных.

!38.png!